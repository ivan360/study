== 模式行 ==

:help modeline

1 什么是模式行？

模式行（modeline）大家应该已经见过了。在Vim文档底部通常会有这么一行`vim:tw=78:ts=8:ft=help:norl:`，这一行就叫模式行。

2 模式行的格式

设置为只读，`vim:readonly`。多个设置项之间用冒号或空格隔开。
`vim:tw=78:ts=8:ft=help:norl:`，设置文本宽度为78；设置制表符宽度为8；文件类型为帮助文件；阅读顺序为左到右。

3 模式行中的附加文本

如果我们在自己的日记中或者写作的过程中我们当然可以随意的在文件前几行或后几行添加模式行。但是在一些情况下我们不能直接地在文件开头或最后一行添加模式行——比如程序的源代码，模式行最好是以注释的形式出现。要让模式行以注释的形式出现，只要在前面加入表示注释的命令或符号就行了。例如要在C++源文件末尾加入模式行：

// vim:ft=cpp:

很简单对吧，事实上模式行的`vim:`之前允许有任意的文字串。唯一的要求是文字串与`vim:`之间必须至少有一个空格。所以，像这样的模式行是允许的：

*****今天是X月X日星期X***** @#$%$^%^&*()   |   vim:encoding=utf8  tw=80

不过下面的模式行则会出错：
/* vim:ro */
原因是后面的`*/‘被当成一个设置项了，而事实上这个设置项不存在。为了能在模式行后面添加文字串（或者说为了使用c风格的注释），我们要用到模式行的另一种形式。

4 模式行的另一种形式

实际上模式行有两种形式，第一种就是前面说的设置项之间用冒号或空格分隔，缺点是不能后设置项后面添加其他文本。第二种要求使用set命令。不能使用多条set命令。但一条命令可以设置多个选项。选项之间用空格分隔。举例而言，像前面提到的Vim文档的模式行以第二种形式写出来就是：

vim:set tw=78 ts=8 ft=help norl:

这种形式的好处就是或以是模式行末随意添加文本。下面的模式行都是允许的：

/* vim:set ro */
<!-- vim:set ft=html: 模式行示例-->

需要注意的是第一种形式中最后一设置项后的冒号或空格是可有可无的。而第二种形式中最后一设置项后一定要有冒号——不管冒号后有没有文字。在设置项中如果要使用空格、制表符或冒号可以在前面加上转义符－`\‘。其他需要转义符的情况见`:help option-backslash‘。


5 模式行应用

由于几乎所有的Vim设置项都可以在模式行中使用所以模式行的使用完全视个人的需要而定。因为自己常用的设置可以放在.vimrc文件中所以实际使用中放在模式行中的设置通常是针对某一文档的专有设置。需要在不同的电脑上编辑/查看同一份文档时为了使用同样的设置也会使用模式行（如Vim的文档）。

vim: tabstop=4
    正确显示制表符，使文档在不同的机子上有一样的制表符宽度
    
vim: tw=48 fo=tqamn ts=4 expandtab
    写文章。使用48个半角字符文本宽度（24个汉字）；序号缩进及汉字支持的格式选项；用4个空格代替制表符；
    
vim: enc=latin1 guifont=terminal\:oem\:h10\:w8
    查看ANSI编码的图形字符（Windows环境）时所用的设置。用来写/看nfo文件。
    
vim: nowrap tw=0 wm=0 backup
    我在行对行翻译时经常使用的设置

vim: fdm=marker
    设置折叠规则。关于折叠（folding）我们在以后会讲到。
    
vim: ft=xxx
    设定filetype。关于filetype在以后会讲到。 

Appendix A 为什么我添加了模式行却没作用？

    首先检查一下`vim:`与前面的文本之间有没有一个（半角）空格。
    其次模式行要求在文件开头的前N行或后N行中，如果没在这个范围内模式行就不起作用。modelines用来设置N的具体数目。比如`:set modelines=8‘这个命令将模式行的有效范围设在了前8行和后8行。
    最后看有没有设置`'modeline'‘选项。modeline选项在Vim中默认是开的但也有可能因为一些原因被关上了，比如设置了nomodeline或是没有设置nocompatible。

[ -结束- ]
