Vim 里的个人维基(Wiki)

版本: 1.1.1
译者: 闲耘™(hotoo.cn[AT]gmail.com)
lizaib(biazil.x[AT]gmail.com)

文档更新记录：v0.9.9 -> v1.0 -> v1.1.1

==============================================================================
目录 *vimwiki-contents*

1. 介绍 |vimwiki|
2. 安装条件 |vimwiki-prerequisites|
3. 映射 |vimwiki-mappings|
3.1. 全局映射 |vimwiki-global-mappings|
3.2. 局部映射 |vimwiki-local-mappings|
3.3. 文本对象 |vimwiki-text-objects|
4. 命令 |vimwiki-commands|
4.1. 全局命令 [[|vimwiki-global-commands|]]
4.2. 局部命令 |vimwiki-local-commands|
5. Wiki 语法 |vimwiki-syntax|
5.1. 字体 |vimwiki-syntax-typefaces|
5.2. 词条 |vimwiki-syntax-links|
5.3. 标题 |vimwiki-syntax-headers|
5.4. 段落 |vimwiki-syntax-paragraphs|
5.5. 列表 |vimwiki-syntax-lists|
5.6. 表格 |vimwiki-syntax-tables|
5.7. 预格式化文本 |vimwiki-syntax-preformatted|
5.8. 块级引用 |vimwiki-syntax-blockquotes|
5.9. 注释 |vimwiki-syntax-comments|
6. 折叠/大纲 |vimwiki-folding|
7. 占位符 |vimwiki-placeholders|
8. 待办事项(TODO)列表 |vimwiki-todo-lists|
9. 表格 |vimwiki-tables|
10. 日记 |vimwiki-diary|
11. 选项 |vimwiki-options|
12. 帮助 |vimwiki-help|
13. 开发者 |vimwiki-developers|
14. 版本更新记录 |vimwiki-changelog|
15. 许可证 |vimwiki-license|


==============================================================================
1. 介绍 *vimwiki*

Vimwiki 是一个 Vim 中的个人 wiki -- 一个有它自己的高亮语法和链接的文本文件。

使用 vimwiki 你可以：
    - 组织笔记和想法；
    - 管理待办事项列表；
    - 写文档。

==============================================================================
2. 安装条件 *vimwiki-prerequisites*

确保你的 vimrc 文件中有如下的设置： >
    {{{
    set nocompatible
    filetype plugin on
    syntax on
    }}}

离开这些设置 Vimwiki 将不能正常工作。


==============================================================================
3. 映射 *vimwiki-mappings*

下面是 vimwiki 的全局和局部映射。

------------------------------------------------------------------------------
3.1. 全局映射 *vimwiki-global-mappings*

                             -- 从|g:vimwiki_list|
[count]<Leader>ww            -- 打开第 [count] 个 wiki 索引文件                 -- <Plug>VimwikiIndex
[count]<Leader>wt            -- 在新标签页中打开第 [count] 个 wiki 索引文件     -- <Plug>VimwikiTabIndex
<Leader>ws                   -- 列出可选择的 wiki 列表                          -- <Plug>VimwikiUISelect
[count]<Leader>w<Leader>w    -- 打开今天第 [count] 个 wiki 日记文件             -- <Plug>VimwikiMakeDiaryNote
[count]<Leader>w<Leader>t    -- 在新标签页中打开今天第 [count] 个 wiki 日记文件 -- <Plug>VimwikiTabMakeDiaryNote


------------------------------------------------------------------------------
3.2. 局部映射（本地映射）

NORMAL MODE *vimwiki-local-mappings* (普通模式)

<CR>        -- 打开/创建 Wiki 词条，              -- <Plug>VimwikiFollowLink
<S-CR>      -- 横向分栏窗口中打开/创建 Wiki 词条  -- <Plug>VimwikiSplitLink
<C-CR>      -- 纵向分栏窗口中打开/创建 Wiki 词条  -- <Plug>VimwikiVSplitLink
<Backspace> -- 回到上一个 Wiki 词条               -- <Plug>VimwikiGoBackLink
<Tab>       -- 寻找并将光标定位到下一个 Wiki 词条 -- <Plug>VimwikiNextLink
<S-Tab>     -- 寻找并将光标定位到上一个 Wiki 词条 -- <Plug>VimwikiPrevLink
<Leader>wd  -- 删除光标所在的 Wiki 词条           -- <Plug>VimwikiDeleteLink
<Leader>wr  -- 重命名光标所在的 Wiki 词条         -- <Plug>VimwikiRenameLink
<C-Space>   -- 切换列表项的开关（选中/反选）      -- <Plug>VimwikiToggleListItem

=         -- 增加标题级别，如果需要则创建标题 -- *vimwiki_=*
-         -- 降低标题级别                     -- *vimwiki_-*
gqq       -- 格式化表格                       -- *vimwiki_gqq* *vimwiki_gww*
<A-Left>  -- 向左移动表格的当前列             -- *vimwiki_<A-Left>*
<A-Right> -- 向右移动表格当前列               -- *vimwiki_<A-Right>*
<C-Up>    -- 如果可以，打开上一个日记词条     -- *vimwiki_<C-Up>*
<C-Down>  -- 如果可以，打开下一个日记词条     -- *vimwiki_<C-Down>*


仅在 |g:vimwiki_use_mouse| 设置为 1 的情况下有效。
<2-LeftMouse>           -- 双击鼠标打开/创建 Wiki 词条。
<S-2-LeftMouse>         -- 横向分栏窗口中打开/创建 Wiki 词条。
<C-2-LeftMouse>         -- 纵向分栏窗口中打开/创建 Wiki 词条。
<RightMouse><LeftMouse> -- 返回到上一个 Wiki 词条。
Note: <2-LeftMouse> 即仅双击左键。


INSERT MODE *vimwiki-table-mappings* (插入模式)
<CR>   -- 转到表格单元格的下一行，如果在最后一行则创建一行       -- *vimwiki_i_<CR>*
<Tab>  -- 转到下一个表格单元格，如果在最后一个单元格，则创建一行 -- *vimwiki_i_<Tab>*
<S-CR> -- 插入 <br /> 并回车换行                                 -- *vimwiki_i_<S-CR>*


------------------------------------------------------------------------------
3.3. 文本对象 *vimwiki-text-objects*

ah  -- 一个包含前置空行的标题。
ih  -- 一个不包含前置空行的标题内部。
vah -- 选择
dah -- 删除
yah -- 复制
cah -- 修改
a\  -- 表格中的一整个单元格（包括单元格边框）。
i\  -- 表格单元格内部。
ac  -- 表格的一列（包括单元格边框）。
ic  -- 表格单元格内部。

==============================================================================
4. 命令 *vimwiki-commands*

------------------------------------------------------------------------------
4.1. 全局命令 *vimwiki-global-commands*

*:VimwikiIndex*            -- 打开当前 wiki 的索引文件。
*:VimwikiTabIndex*         -- 在新标签页中打开当前 wiki 的索引文件。
*:VimwikiUISelect*         -- 打开所选择的 wiki 索引文件。
*:VimwikiMakeDiaryNote*    -- 打开当前 wiki 中今天的 wiki 日记文件。
*:VimwikiTabMakeDiaryNote* -- 在新标签页中打开当前 wiki 中今天的 wiki 日志文件。

------------------------------------------------------------------------------
4.2. 局部命令 *vimwiki-local-commands*

*:VimwikiFollowLink*     -- 打开/创建 Wiki 词条。
*:VimwikiGoBackLink*     -- 返回到跳转过来的上一个 Wiki 词条。
*:VimwikiSplitLink*      -- 在纵向分栏窗口中打开/创建 Wiki 词条。
*:VimwikiVSplitLink*     -- 在横向分栏窗口中打开/创建 Wiki 词条。
*:VimwikiNextLink*       -- 寻找并将光标定位到下一个 Wiki 词条。
*:VimwikiPrevLink*       -- 寻找并将光标定位到上一个 Wiki 词条。
*:VimwikiGoto*           -- 跳转到指定词条
*:VimwikiDeleteLink*     -- 删除当前所在的 Wiki 词条。
*:VimwikiRenameLink*     -- 重命名当前所在的 Wiki 词条。
*:Vimwiki2HTML*          -- 将当前所在的 wiki 页面转换成 HTML 页面。
*:VimwikiAll2HTML*       -- 将所有的 wiki 页面转换成 HTML。
*:VimwikiToggleListItem* -- 切换列表项的开关（选中/反选）


*:VimwikiSearch* /pattern/ -- 在当前 wiki 中搜索 /pattern/。
*:VWS* /pattern            -- 同上
|:cnext|                   -- 命令显示下一个匹配项。
|:cprevious|               -- 命令显示上一个匹配项。

:VimwikiTable           -- 创建一个 5 列 2 行的表格。
:VimwikiTable cols rows -- 创建一个指定列数和行数的表格。
:VimwikiTable cols      -- 创建一个指定列数和 2 行的表格。


:VimwikiTableMoveColumnLef   -- 向左移动当前列
:VimwikiTableMoveColumnRight -- 向右移动当前列

*:VimwikiGenerateLinks* -- 插入所有可用的词条到当前缓冲区。
*:VimwikiDiaryNextDay*  -- 如果可以，打开下一个日记词条。
*:VimwikiDiaryPrevDay*  -- 如果可以，打开上一个日记词条。


==============================================================================
5. Wiki 语法 *vimwiki-syntax*

这里有许多不同的 wiki， 许多情况下它们有自己的语法，vimwiki 也不例外。默认的
vimwiki 语法是 google 的 wiki 语法标记的子集。

MediaWiki 语法文件包含在这个发行版之中（不包含 MediaWiki 原始语法中那些花里胡哨
的部分）。
参考 |vimwiki-option-syntax|。


------------------------------------------------------------------------------
5.1. 字型 *vimwiki-syntax-typefaces*

下面简单给了一些用来控制修饰文本字型的语法： >
*粗体文本*
_斜体文本_
~~删除线~~
`代码 (无语法) 文本`
上标^脚本^
下标,,脚本,,

------------------------------------------------------------------------------
5.2. 词条 *vimwiki-syntax-links*

内部链接~
WikiWords: >
CapitalizedWordsConnected

你可以通过在前面加感叹号的方式来取消(驼峰式) Wiki 词条。 >
!CapitalizedWordsConnected

或者通过 |g:vimwiki_camel_case| 参数来完全禁用(驼峰式) WikiWord。

词条里带空格时： >
[[This is a link]]
或： >
[[链接源地址|链接描述]]
或： >
[[链接源地址][链接描述]]


外部链接~
纯链接： >
http://code.google.com/p/vimwiki

带描述的链接： >
[http://habamax.ru/blog habamax 的主页]


图片及图片链接~
Image link is the link with one of jpg, png or gif endings.
图片链接就是以 jpg, png 或 gif 结尾的链接。
纯图片链接： >
http://someaddr.com/picture.jpg
在 html 中即： >
<img src="http://someaddr.com/picture.jpg" />

本地图片链接： >
[[images/pabloymoira.jpg]]
在 html 中即： >
<img src="images/pabloymoira.jpg" />
图片的路径（例如 images/pabloymoira.jpg）是相对于
|vimwiki-option-path_html|的。

双中括号内的图片链接： >
[[http://habamax.ru/blog/wp-content/uploads/2009/01/2740254sm.jpg]]
在 html 中即： >
<img src="http://habamax.ru/ ... /.jpg" />

双中括号内带描述信息的图片链接： >
[[http://habamax.ru/blog/wp-content/uploads/2009/01/2740254sm.jpg|dance]]
在 html 中即： >
<a href="http://habamax.ru/ ... /.jpg">dance</a>

双中括号内带备用信息的图片链接： >
[[http://habamax.ru/blog/wp-content/uploads/2009/01/2740254sm.jpg|dance|]]
在 html 中即: >
<img src="http://habamax.ru/ ... /.jpg" alt="dance"/>

双中括号内带备用信息和一些样式的图片链接： >
[[http://helloworld.com/blabla.jpg|cool stuff|width:150px; height: 120px;]]
在 html 中即： >
<img src="http://helloworld.com/ ... /.jpg" alt="cool stuff"
style="width:150px; height:120px"/>

双中括号内带样式，但不带备用信息的图片链接： >
[[http://helloworld.com/blabla.jpg||width:150px; height: 120px;]]
在 html 中即： >
<img src="http://helloworld.com/ ... /.jpg" alt=""
style="width:150px; height:120px"/>

缩略图链接： >
[http://someaddr.com/bigpicture.jpg http://someaddr.com/thumbnail.jpg]
或 >
[[http://someaddr.com/bigpicture.jpg|http://someaddr.com/thumbnail.jpg]]
在 html 中即： >
<a href="http://someaddr.com/ ... /.jpg">
<img src="http://../thumbnail.jpg /></a>


------------------------------------------------------------------------------
5.3. 标题 *vimwiki-syntax-headers*

= 1 级标题 =~
默认情况下，所有的标题都将使用 |hl-Title| 的样式风格来高亮。

== 2 级标题 ==~
你可以为每个标题级别设置不同的颜色： >
:hi VimwikiHeader1 guifg=#FF0000
:hi VimwikiHeader2 guifg=#00FF00
:hi VimwikiHeader3 guifg=#0000FF
:hi VimwikiHeader4 guifg=#FF00FF
:hi VimwikiHeader5 guifg=#00FFFF
:hi VimwikiHeader6 guifg=#FFFF00
为 6 个标题级别，或任何一个标题级别都不设置颜色。

=== 3 级标题 ===~
查看 |g:vimwiki_hl_headers|。

==== 4 级标题 ====~
===== 5 级标题 =====~
====== 6 级标题 ======~


你可以让标题在 html 中居中，只要在第一个 '=' 之前加入空格即可：
= 居中的 1 级标题 =~


------------------------------------------------------------------------------
5.4. 段落 *vimwiki-syntax-paragraphs*

段落就是从第 1 列开始（无缩进）的行组成的块，段落间以一个空行分隔：

这是第一个
带有两行的段落。

这是一个带有
两行的段落。

------------------------------------------------------------------------------
5.5. 列表 *vimwiki-syntax-lists*

无序列表： >
* 符号列表项 1
* 符号列表项 2
* 符号列表子项 1
* 符号列表子项 2
* 等等 ...
* 等等 ...
* ...
* 符号列表子项 3
* 等等。
或： >
- 符号列表项 1
- 符号列表项 2
- 符号列表子项 1
- 符号列表子项 2
- 等等 ...
- 等等 ...
- ...
- 符号列表子项 3
- 等等。

或者混合使用： >
- 符号列表项 1
- 符号列表项 2
* 符号列表子项 1
* 符号列表子项 2
* 等等 ...
- 等等 ...
- ...
* 符号列表子项 3
* 等等。

有序列表 >
# 编号列表项 1
# 编号列表项 2
# 编号列表子项 1
# 编号列表子项 2
# 等等 ...
# 等等 ...
# ...
# 编号列表子项 3
# 等等。

也可以混合使用符号列表和编号列表： >
* 符号列表项 1
* 符号列表项 2
# 编号列表子项 1
# 编号列表子项 2

Note *, - 或 # 之后的空格是必须的。

多行列表项： >
* 符号列表项 1
列表项 1 的续行。
列表项 1 的更多续行。
* 符号列表项 2
* 符号列表子项 1
列表子项 1 续行
列表子项 1 更多续行。
* 符号列表子项 2
* 等等。

定义列表： >
术语 1:: 定义 1
术语 2::
::定义 2
::定义 3
（译注：这里可能有缩进错误）


------------------------------------------------------------------------------
5.6. 表格 *vimwiki-syntax-tables*

表格是每个单元格有竖线分隔符 | 构成的内容，你也可以在表格单元格中插入其他内联
的 wiki 语法，包括字体样式和链接。
例如： >

| 年 | 最低温度 | 最高温度 |
|------+------------+--------|
| 1900 | -10 | 25 |
| 1910 | -15 | 30 |
| 1920 | -10 | 32 |
| 1930 | _N/A_ | _N/A_ |
| 1940 | -2 | 40 |
>

下面的这部分，在 html 中高亮为表头样式： >
| 年 | 最低温度 | 最高温度 |
|------+----------+----------|
<

如果表格被缩进，这在 html 页面中这个表格会居中。

关于如何管理表格的详细信息，可以参考 |vimwiki-tables|。

备注： 你可以在表格中使用 [[链接地址|描述信息]] 的链接类型，
或使用 [[链接地址][描述信息]] 来替代。


------------------------------------------------------------------------------
5.7. 预格式化文本 *vimwiki-syntax-preformatted*

使用 {{{ 和 }}} 来定义预格式化文本块：
{{{ >
Tyger! Tyger! burning bright
In the forests of the night,
What immortal hand or eye
Could frame thy fearful symmetry?
In what distant deeps or skies
Burnt the fire of thine eyes?
On what wings dare he aspire?
What the hand dare sieze the fire?
}}}


你也可以添加附加信息到 {{{ 标签： >
{{{class="brush: python" >
def hello(world):
for x in range(10):
print("Hello {0} number {1}".format(world, x))
}}}

导出的 HTML 结果是： >
<pre class="brush: python">
def hello(world):
for x in range(10):
print("Hello {0} number {1}".format(world, x))
</pre>

这就可以使用类似 google syntax highlighter 这样的 js
代码着色器这样有用的工具了。

可以设置 vimwiki 来高亮预格式化代码片段。
参考 |vimwiki-option-nested_syntaxes|

------------------------------------------------------------------------------
5.8. 块级引用 *vimwiki-syntax-blockquotes*

以 4 个以上空格开始的文本，就是一个引用块。

这在 vimwiki 中是一个引用块，它在 vim 中不会被高亮，但是可以使用样式表让
它在 html 中高亮，块级引用通常用来引用其他来源的较长文本片段。

------------------------------------------------------------------------------
5.9. 注释 *vimwiki-syntax-comments*

在 <!-- 和 --> 之间的文本是一个注释。
例如： >
<!-- this text would not be in HTML -->
<

==============================================================================
6. 代码折叠/大纲 *vimwiki-folding*

Vimwiki 可以根据标题和列表项来折叠或显示大纲。

例如：
= 我的当前任务 =
* [ ] 做某事 1
* [ ] 做某事的子步骤 1.1
* [ ] 做某事的子步骤 1.2
* [ ] 做某事的子步骤 1.2.1
* [ ] 做某事的子步骤 1.2.2
* [ ] 做某事的子步骤 1.3
* [ ] 做某事 2
* [ ] 做某事 3

击 |zM| 键：
= 我的当前任务 = [8] --------------------------------------~

击 |zr| 键：
= 我的当前任务 =~
* [ ] 做某事 1 [5] --------------------------------------~
* [ ] 做某事 2~
* [ ] 做某事 3~

击 |zr| 键更多次：
= 我的当前任务 =~
* [ ] 做某事 1~
* [ ] 做某事的子步骤 1.1~
* [ ] 做某事的子步骤 1.2 [2] -------------------------------~
* [ ] 做某事的子步骤 1.3~
* [ ] 做某事 2~
* [ ] 做某事 3~

备注： 不论是否使用默认语法，只要是使用 |shiftwidth| 来缩进，在列表项是的折叠
都会正常工作。对于 MediaWiki 来说，* 和 # 都应该放在第一列。

设置 |g:vimwiki_folding| 来启用/禁用折叠。

==============================================================================
7. 占位符 *vimwiki-placeholders*

------------------------------------------------------------------------------
%toc 目录 *vimwiki-toc* *vimwiki-table-of-contents*

从某个 wiki 生成 html 时，可以添加目录到 html 页面中。
只需要输入 >

%toc

到 wiki 页面。
还可以给“目录”添加标题： >

%toc 目录

或者 >

%toc 随便什么


------------------------------------------------------------------------------
%title 页面的标题(title)

When you htmlize your wiki page you have default title which is the filename
of the page.
为 wiki 页面生成 html 时，默认使用文件名做为标题。
如果希望使用另一个标题，在 wiki 页面中加入： >

%title My books
<


------------------------------------------------------------------------------
%nohtml *vimwiki-nohtml*

如果不希望 wiki 被转为 html 页面， wiki 中输入： >

%nohtml


==============================================================================
8. 待办事项列表(Todo lists) *vimwiki-todo-lists*

可以(使用 Vimwiki)来做待办事项列表 -- 一个可以切换选中/反选的项目列表。

参考如下示例：
= 可切换的待办列表项 =
* [X] 切换列表项开/关。
* [X] 简单的在 [ ] 和 [X] 之间切换。
* [X] 所有的列表子项将被适当的切换为开/关。
* [X] 仅当当前行是列表项时，切换子项。
* [X] 父列表项将受子列表项的切换影响。
* [X] 同样支持编号列表项的切换。
* [X] 添加高亮到列表项的复选框。
* [X] 使用 o, O 和 <CR> 创建新行时，新列表项会带 [ ]。(译注：<CR>没有带 [ ])


在第一个列表项按 <C-Space> 会切换所有的子项：
(译注：<C-Space> 一般是中文输入法的热键，可以自定义键盘映射)
= 可切换的待办列表项 =
* [ ] 切换列表项开/关。
* [ ] 简单的在 [ ] 和 [X] 之间切换。
* [ ] 所有的列表子项将被适当的切换为开/关。
* [ ] 仅当当前行是列表项时，切换子项。
* [ ] 父列表项将受子列表项的切换影响。
* [X] 同样支持编号列表项的切换。
* [X] 添加高亮到列表项的复选框。
* [X] 使用 o, O 和 <CR> 创建新行时，新列表项会带 [ ]。

在第三个列表项是按 <C-Space> 将切换自身和其父项：
= 可切换的待办列表项 =
* [.] 切换列表项开/关。
* [ ] 简单的在 [ ] 和 [X] 之间切换。
* [X] 所有的列表子项将被适当的切换为开/关。
* [ ] 仅当当前行是列表项时，切换子项。
* [ ] 父列表项将受子列表项的切换影响。
* [ ] 同样支持编号列表项的切换。
* [ ] 添加高亮到列表项的复选框。
* [ ] 使用 o, O 和 <CR> 创建新行时，新列表项会带 [ ]。

父项会受子项的切换影响，[ ] 中的符号与子项百分比对照如
（也可参考 |g:vimwiki_listsyms| ）：
[ ] -- 0%
[.] -- 1-33%
[o] -- 34-66%
[O] -- 67-99%
[X] -- 100%

在可视模式下，可以批量切换多个列表项。


==============================================================================
9. 表格 *vimwiki-tables*

使用 :VimwikiTable 命令默认创建 5 列 2 行的表格： >

| | | | | |
|---+---+---+---+---|
| | | | | |
<

表格会自动格式化，我们先加些文本到第一个表格单元中： >

| 姓氏 | | | | |
|---+---+---+---+---|
| | | | | |
<

无论按 <TAB>, <CR> 还是离开插入模式，表格都将被格式化： >
(译注 I：<TAB> 键会与其他使用 <TAB> 键的脚本(如snipMate)冲突，可以重新映射其他
热键；
译注 II：0.9.9及之前版本对于双宽字符的格式化有问题，1.0 beta之后有修正。)
>
| 姓氏 | | | | |
|------+---+---+---+---|
| | | | | |
<

你可以轻易的创建看起来不错的文本风格的表格，只需要按 <TAB> 键并输入新值： >

| 姓氏 | 名字 | 年龄 | 城市 | 电子邮件 |
|------------+------------+------+------------+----------------------|
| Vladislav | Pokrishkin | 31 | 莫斯科 | vlad_pok@smail.com |
| James | Esfandiary | 27 | 伊斯坦布尔 | esfandiary@tmail.com |
<

格式化表格可以使用 'gqq' 快捷键。



==============================================================================
10. 日记 *vimwiki-diary*

日记功能可帮助你记录日常笔记，你能够非常容易地将分类的日记添加至Vimwiki中，
只要按下<Leader>w<Leader>w，即可以当前的日期为名来创建新的笔记，
这个新创建的笔记文件，会保存在diary目录中。

现在，你可以参考下面示例来创建你的日记：
今天是2010-01-27。

按 \w\w 打开日记首页。
~/vimwiki/diary.wiki is created.

2 把下面几行添加到 ~/vimwiki/diary/diary.wiki 文件中
= Diary =
| [[2010-01-27]] |

~/vimwiki/diary/2010-01-27.wiki is created.
这样，就生成了以当前日期命中的wiki日记文件，你可在这个日记中记录事项了。
要是你没做键盘映射，你可在Vim命令模式执行:VimwikiMakeDiaryNote，也可以进入日记页。
-------------------------------------------

撰写第二天的日记
按 \w\w 。

打开~/vimwiki/diary/diary.wiki文件后，在 = Diary = 下的第一行增加第二天
的日期即可。

= Diary =
| [[2010-01-28]] | [[2010-01-27]] |

~/vimwiki/diary/2010-01-28.wiki is created.
这样，就创建第二天的日记了，你可以添加信息在这个日记中。.
>
默认情况下在一行创建4个链接，所有的链接都以日期进行分类的。


集成日历功能 *vimwiki-calendar*
------------------------------------------------------------------------------
如果你已经安装了Calendar.vim插件，你可以使用它来创建笔记。
在命令模式执行:Calendar，并按<Enter>键，会在diary目录创建以当前日期为名.Wiki文件。
嗯，这种方式创建的日记比前面的方法好多了。

Calendar.vim的插件，你可以在这下载：http://www.vim.org/scripts/script.php?script_id=52


参考 |g:vimwiki_use_calendar| 选项用来启用/禁用日历。



==============================================================================
11. 选项 *vimwiki-options*
可以通过全局或者每个 wiki (局部)的选项来设置 vimwki，所有的全局选项都使用如下模板来设置：
let g:option_name=option_value

你可以参考下面的|g:vimwiki_list|说明与实例，在_vimrc文件中配置相关参数。

------------------------------------------------------------------------------
*g:vimwiki_list* *vimwiki-multiple-wikies*

一般形式：
{'option1': 'value1', 'option2: 'value2', ...}

请参考下面的例子：
let g:vimwiki_list = [{'path': '~/my_site/', 'path_html': '~/public_html/'}]

打开Vimwiki时会定向到 ~/my_site/ 目录，而生成的网页文件会储存在 ~/public_html/
目录。

下一个例子：
let g:vimwiki_list = [{'path': '~/my_site/', 'path_html': '~/public_html/'},
\ {'path': '~/my_docs/', 'ext': '.mdox'}]
在上面的示例中，第二行表示增加了2个wiki，第二个会定向至 ~/my_docs/
、ext、.mdox目录中。.

在 g:vimwiki_list 设置空目录，其选项为如下： >
let g:vimwiki_list = [{},
\ {'path': '~/my_docs/', 'ext': '.mdox'}]

[注] 译者的设置如下： >
let g:vimwiki_list = [{'path': 'F:/File/My Dropbox/VimWiki/A0.WikiIndex/',
\ 'path_html': 'F:/File/My Dropbox/VimWiki/Z0.OutHtml',
\ 'html_header': 'F:/File/My Dropbox/VimWiki/Z0.Template/header.tpl',}]
<

你也可以用 |Dictionary| 分隔来创建多个 Wiki。 >

let wiki_1                 = {}
let wiki_1.path            = '~/my_docs/'
let wiki_1.html_header     = '~/public_html/header.tpl'
let wiki_1.nested_syntaxes = {'python': 'python', 'c++': 'cpp'}

let wiki_2                 = {}
let wiki_2.path            = '~/project_docs/'
let wiki_2.index           = 'main'

let g:vimwiki_list         = [wiki_1, wiki_2]

<

PER WIKI OPTIONS *viwmiki-local-options*
(局部 WIKI 选项)


*vimwiki-option-path*
------------------------------------------------------------------------------
选项 缺省值
path ~/vimwiki/

描述
定向至Wiki文件夹：
let g:vimwiki_list = [{'path': '~/my_site/'}]


*vimwiki-option-path_html*
------------------------------------------------------------------------------
选项 缺省值
path_html ~/vimwiki_html/

描述
wiki转换为HTML网页格式的定向位置：
let g:vimwiki_list = [{'path': '~/my_site/',
\ 'path_html': '~/my_site_html/'}]


如果省略 path_html 的"/"号及"_html"选项，可能无法生成网页，例如下面的示例： >
let g:vimwiki_list = [{'path': '~/okidoki/'}]

建议修改为 path_html = '~/okidoki_html/'

*vimwiki-option-auto_export*
------------------------------------------------------------------------------
选项 缺省值 值~
auto_export 0 0, 1

描述
执行保存wiki页时，若设置此项值为1时，将自动生成HTML文件
let g:vimwiki_list = [{'path': '~/my_site/', 'auto_export': 1}]

这会使你的HTML文件保持最新的！

*vimwiki-option-index*
------------------------------------------------------------------------------
选项 缺省值
index index

描述
wiki的首页名
let g:vimwiki_list = [{'path': '~/my_site/', 'index': 'main'}]

NOTE: 不要添加文件扩展名！


*vimwiki-option-ext*
------------------------------------------------------------------------------
选项 缺省值
ext .wiki

描述
wiki文件扩展名
let g:vimwiki_list = [{'path': '~/my_site/',
\ 'index': 'main', 'ext': '.document'}]


*vimwiki-option-syntax*
------------------------------------------------------------------------------
选项 缺省值 值
syntax default default, media

描述
Wiki语法加色
你可以使用不同的标记语言(当前缺省的为vimwiki与MediaWiki的语法标记)，但只有在Vimwiki预设标记
不能转换HTML时才有效。
使用MediaWiki的标记： >
let g:vimwiki_list = [{'path': '~/my_site/', 'syntax': 'media'}]
<

*vimwiki-option-html_header*
------------------------------------------------------------------------------
选项 缺省值
html_header

描述
设置html文件头模板：
let g:vimwiki_list = [{'path': '~/my_site/',
\ 'html_header': '~/public_html/header.tpl'}]

这个header.tpl模板代码，你可以参考下面的： >
<html>
<head>
<link rel="Stylesheet" type="text/css" href="%root_path%style.css" />
<title>%title%</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
</head>
<body>
<div class="contents">

变量说明
%title% 将被替换为 wiki 的文件名或者 |vimwiki-title|
%root_path% 显示根目录的相对路径。
例如 wiki 词条为 [[dir1/dir2/dir3/WikiLink]]
则 %root_path% 会被替换为 '../../../'。


*vimwiki-option-html_footer*
------------------------------------------------------------------------------
选项 缺省值
html_footer

描述
设置html文件页脚模板：
let g:vimwiki_list = [{'path': '~/my_site/',
\ 'html_footer': '~/public_html/footer.tpl'}]

可参考如下页脚模板footer.tpl文件代码：
</div>
</body>
</html>


*vimwiki-option-css_name*
------------------------------------------------------------------------------
选项 缺省值
css_name style.css

描述
设置.css文件名：
let g:vimwiki_list = [{'path': '~/my_pages/',
\ 'css_name': 'main.css'}]

或者 >
let g:vimwiki_list = [{'path': '~/my_pages/',
\ 'css_name': 'css/main.css'}]
<

*vimwiki-option-maxhi*
------------------------------------------------------------------------------
选项 缺省值 值~
maxhi 1 0, 1

描述~
不存在 Wiki 词条，即红色高亮标记的关键字，会使操作变慢，比如切换啥的。
如果不想让文件系统总是检查 Wiki 词条，可以将 maxhi 的值设为 0。
例如:
let g:vimwiki_list = [{'path': '~/my_site/', 'maxhi': 0}]




*vimwiki-option-nested_syntaxes*
------------------------------------------------------------------------------
选项 缺省值 值~
nested_syntaxes {} 成对的高亮关键字，或者vim的文件类型

描述~
你可以在Vim显示不同的语言语法高亮，像C++、Pytho等语法高亮。
例如下面在你的 vimrc 中的设置： >
let wiki = {}
let wiki.path = '~/my_wiki/'
let wiki.nested_syntaxes = {'python': 'python', 'c++': 'cpp'}
let g:vimwiki_list = [wiki]

设置 python、c++ 高亮: >
{{{class="brush: python"
for i in range(1, 5):
print(i)
}}}

{{{class="brush: c++"
#include "helloworld.h"
int helloworld()
{
printf("hello world");
}
}}}

或者： >
{{{c++
#include "helloworld.h"
int helloworld()
{
printf("hello world");
}
}}}

{{{python
for i in range(1, 5):
print(i)
}}}



*vimwiki-option-diary_rel_path*
------------------------------------------------------------------------------
选项 缺省值~
diary_rel_path diary/

描述~
|vimwiki-option-path|的路径用以重新载入日记文件夹。


*vimwiki-option-diary_index*
------------------------------------------------------------------------------
选项 缺省值
diary_index diary

描述~
diary文件夹用来保存以日期命名的wiki文件，diary文件名可自定义别的文件名。


*vimwiki-option-diary_header*
------------------------------------------------------------------------------
选项 缺省值~
diary_header Diary

描述~
在 |vimwik-option-diary_index| 中的名称将链接到以日期命名的 wiki 文件。


*vimwiki-option-diary_link_count*
------------------------------------------------------------------------------
Key Default value~
diary_link_count 4

描述~
每一行显示日期链接的最大数目。
例如:
= Diary =
| [[2010-01-30]] | [[2010-01-29]] | [[2010-01-28]] | [[2010-01-27]] |
| [[2010-01-26]] | [[2010-01-25]] |




GLOBAL OPTIONS *viwmiki-global-options*
(全局选项)

使用: >
let g:option_name=option_value
来设置。

------------------------------------------------------------------------------
*g:vimwiki_hl_headers*

高亮标题颜色： =Reddish=, ==Greenish==, ===Blueish===

值 描述~
1 使用预先定义的颜色高亮不同级别的标题。
0 使用 |hl-Title| 或 VimwikiHeader1-VimwikiHeader6 (如果已定义
了颜色主题的话)

缺省值为: 1


------------------------------------------------------------------------------
*g:vimwiki_hl_cb_checked*

选中列表项可以高亮显示的颜色:

* [X] 整行高亮，可将选项值设为1.
* [ ] 我希望 Vim 可以使用 strikethru(?).

值 描述~
1 用组名( |group-name| ) 为 "Comment" 的语法高亮选中的复选框。
0 不要高亮

缺省值: 0


------------------------------------------------------------------------------
*g:vimwiki_global_ext* *vimwiki-temporary-wiki*

如果一个扩展名是 wiki 的文件被打开，而它有所在的目录不在 |g:vimwiki_list| 列表中，
则：

值 描述~
1 标记这个目录为临时wiki.
0 不标记这个目录为临时wiki.

缺省值: 1


------------------------------------------------------------------------------
*g:vimwiki_upper* *g:vimwiki_lower*

这会影响词条的检测。
在默认情况下，词条会检测使用英语、俄语的字母。
你可以设置为自己的: >
let g:vimwiki_upper = "A-Z\u0410-\u042f"
let g:vimwiki_lower = "a-z\u0430-\u044f"


------------------------------------------------------------------------------
*g:vimwiki_auto_checkbox*

如果开启，创建复选框会触发列表项目。.

值 描述~
0 不要创建复选框。
1 创造复选框。

缺省值: 1

例如:
执行 <C-Space> (|:VimwikiToggleListItem|) 在一个列表项没有复选框来创建它： >
* List item
结果: >
* [ ] List item


------------------------------------------------------------------------------
*g:vimwiki_menu*

用 GUI 菜单来选择可用的 wiki。

值 描述~
'' 没有菜单
'Vimwiki' 顶层菜单"Vimwiki"
'Plugin.Vimwiki' "Vimwiki" 子菜单的顶层菜单 "Plugin" 等。

缺省值: 'Vimwiki'

------------------------------------------------------------------------------
*g:vimwiki_stripsym*

更改脚本符号 -- 在Windows你不能使用 /*?<>" 作为文件名，所以 vimwiki 替换它们为
自然符号。( _ 是缺省) ：
let g:vimwiki_stripsym = '_'

你可以将它更改为空格，例子： >
let g:vimwiki_stripsym = ' '

------------------------------------------------------------------------------
*g:vimwiki_badsyms*

你可能不喜欢文件名中包含空格（就像其他 vimwiki 用户一样），如果这样，你可以
设置将那些坏字符转换为指定的字符
|g:vimwiki_stripsym|: >
let g:vimwiki_badsyms = ' '

现在所有的 [[links with spaces]] 将被创建类似 'links_with_spaces' 这样的文件。

这个选项是 |g:vimwiki_stripsym| 的一个补充。

------------------------------------------------------------------------------
*g:vimwiki_listsyms*

列表复选框中 5 个字符的字符串（译注：用来表示列表项的完成度）。
默认值是 ' .oOX'。

g:vimwiki_listsyms[0] 是完成 0% 的项。
g:vimwiki_listsyms[4] 是完成 100% 的项。

------------------------------------------------------------------------------
*g:vimwiki_use_mouse*

从 |vimwiki-local-mappings| 处使用局部鼠标映射。

值 描述~
0 不使用鼠标映射。
1 使用鼠标映射。

默认值: 0

------------------------------------------------------------------------------
*g:vimwiki_folding*

启用/禁用 vimwiki 的折叠/大纲。 vimwiki 使用 'expr' 折叠方法(foldmethod)，它
很灵活但是性能很低。

值 描述~
0 禁用折叠。
1 启用折叠。

默认值: 0

------------------------------------------------------------------------------
*g:vimwiki_fold_lists*

启用/禁用 折叠子列表项。

值 描述~
0 禁用子列表项的折叠功能。
1 启用子列表项的折叠功能。

默认值: 0

------------------------------------------------------------------------------
*g:vimwiki_fold_trailing_empty_lines*

折叠，或不折叠那些已经折叠的行之间的空行。

值 描述~
0 仅折叠一个空行，其他的空行不折叠。
1 折叠所有的空行。

默认值: 0

------------------------------------------------------------------------------
*g:vimwiki_camel_case*

如果不希望 WikiWord 这样的驼峰式词组作为一个 Wiki 词条，可以更改这个设置。

值 描述~
0 不要将驼峰式词组作为 Wiki 词条。
1 将驼峰式词组作为 Wiki 词条。

默认值: 1

------------------------------------------------------------------------------
*g:vimwiki_list_ignore_newline*

这是与 HTML 相关的选项。
在多行列表项里将换行符转为 <BR />。

值 描述~
0 将换行符转为 <BR />。
1 忽略换行符。

默认值: 1

------------------------------------------------------------------------------
*g:vimwiki_use_calendar*

针对日历里选中日期，新建或打开已存在的日记 wiki 文件。
参考 |vimwiki-calendar|。

值 描述~
0 不要使用日历。
1 使用日历。

默认值: 1


------------------------------------------------------------------------------
*g:vimwiki_browsers* *VimwikiWeblinkHandler*

你可以使用 Web 浏览器打开一个外部链接。浏览器列表参考 |g:vimwiki_browsers|。

针对 Win32：chrome, opera, firefox 和 explorer。
针对其他系统：opera, firefox 和 konqueror。

列表中第一个可用的浏览器会被用来打开链接。假如你有 opera 和 firefox，并希望
用后者打开链接，只需要： >
let g:vimwiki_browsers=['C:\Program Files\Firefox\firefox.exe']

或者重定义 VimwikiWeblinkHandler 函数： >
function! VimwikiWeblinkHandler(weblink)
let browser = 'C:\Program Files\Firefox\firefox.exe'
execute '!start "'.browser.'" ' . a:weblink
endfunction


------------------------------------------------------------------------------
*g:vimwiki_table_auto_fmt*

启用或禁用表格的自动格式化。

值 描述~
0 不要自动格式化表格。
1 自动格式化表格。

默认值: 1


------------------------------------------------------------------------------
*g:vimwiki_w32_dir_enc*

从当前编码(|encoding|)转换目录名称为 'g:vimwiki_w32_dir_enc' 编码。

比如当前编码是 'enc=utf-8' 并且你设置 >
let g:vimwiki_w32_dir_enc = 'cp1251'
<
则下面带换行符(<CR>)的链接： >
[[привет/мир]]
>
将从 utf-8 的 'привет' 转换为 cp1251 编码，并使用这个编码的名称创建目录。

默认： ''



------------------------------------------------------------------------------
*g:vimwiki_CJK_length*

使用特殊的方法来计算双宽字符的长度（用来对齐表格单元）。

值 描述~
0 不使用。
1 使用。

默认： 0

注意: Vim73 加入了 |strdisplaywidth| 特性，所以对于 Vim73 用户来说，该选项已过时。


------------------------------------------------------------------------------
*g:vimwiki_dir_link*

这个选项是关于目录链接的操作 -- [[directory/]], [[papers/]] 等等。

值 描述~
'' 使用标准的 netrw 插件打开 'directory/' 目录。
'index' 打开 'directory/index.wiki'，如果没有就创建。
'main' 打开 'directory/main.wiki'，如果没有就创建。
等等。

默认: '' (空字符)


------------------------------------------------------------------------------
*g:vimwiki_html_header_numbering*

如果希望 html 中的标题带上自动编号，设置这个选项。

例如： >
1 Header1
1.1 Header2
1.2 Header2
1.2.1 Header3
1.2.2 Header3
1.3 Header2
2 Header1
3 Header1
等等。

值 描述~
0 关闭标题的编号。
1 开启标题的编号。编号从一级标题开始。
2 开启标题的编号。彪悍从二级标题开始。
等等。

例如当 g:vimwiki_html_header_numbering = 2: >
Header1
1 Header2
2 Header2
2.1 Header3
2.1.1 Header4
2.1.2 Header4
2.2 Header3
3 Header2
4 Header2
等等。

默认： 0


------------------------------------------------------------------------------
*g:vimwiki_html_header_numbering_sym*

|g:vimwiki_html_header_numbering| 的结束符号。

值 描述~
'.' 点号将被添加到标题编号的后面。
')' 右括号将被添加到标题编号的后面。
等等。

设置有
let g:vimwiki_html_header_numbering = '.'
的标题将看起来如下： >
1. Header1
1.1. Header2
1.2. Header2
1.2.1. Header3
1.2.2. Header3
1.3. Header2
2. Header1
3. Header1


默认: '' (空字符)

------------------------------------------------------------------------------
*g:vimwiki_file_exts*

逗号分隔的文件后缀列表。

考虑到以下链接： [[my_script.php][my script]]。
如果 'php' 后缀在 g:vimwiki_file_exts 中，这个链接在生成 html 文件时，会被
生成为 <a href="my_script.php">>my script</a>。
否则，将被生成为 <a href="my_script.php.html">my script</a> (注意 .html)


默认值： 'pdf,txt,doc,rtf,xls,php,zip,rar,7z,html,gz'


------------------------------------------------------------------------------
*g:vimwiki_valid_html_tags*

可以在 vimwiki 里使用的 html 标签列表，以逗号分隔。

默认值： 'b,i,s,u,sub,sup,kbd,br,hr'


------------------------------------------------------------------------------
*g:vimwiki_conceallevel*

在 Vim73 中 |conceallevel| 是针对局部的窗口选项设置，因此，当在新标签页或
新窗口中打开 Vimwiki 缓冲区时，它会被设置为默认值。

Vimwiki 在每次进入 vimwiki 缓冲区时都设置 |conceallevel| 为
g:vimwiki_conceallevel

默认值： 3



==============================================================================
12. 帮助 *vimwiki-help*

非常感谢你们帮助 vimwiki 变得更好！
任何帮助，无论是修正错别字还是代码片段补丁 -- 欢迎一切。

有问题都可以提交到 http://code.google.com/p/vimwiki/issues .


==============================================================================
13. 开发者 *vimwiki-developers*

- Maxim Kim <habamax@gmail.com>
创始人。
- Mikhail Trishchenkov <kriomant(at)gmail.com>
于 2009 年 12 月加入。

Vimwiki 的网址: http://code.google.com/p/vimwiki/
Vim 插件的网址: http://www.vim.org/scripts/script.php?script_id=2226

... 后记

感谢所有在 www.vim.org 上给 vimwiki 投票的人。我本可以用业余时间和美女跳舞，
不过你的投票也是一种很好的替代形式。 ;)

此致，
Maxim Kim.

==============================================================================
