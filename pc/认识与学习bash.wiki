
 第十一章、认识与学习 BASH 
================================
他自带终端gnome-terminal的编辑风格是emacs风格
    Ctrl + a - 返回到当前命令的开始
    Ctrl + e - 返回到当前命令的末尾
    Ctrl + w - 删除光标左边的第一个条目（变量或者命令）
    Ctrl + u - 剪切光标前面的所有内容
    Ctrl + y - 剪切光标后面的所有内容
    Ctrl + y - 粘贴你用Ctrl +u或者Ctrl + y剪切的内容
    Ctrl + p - 滚动显示以前的命令
    Ctrl + n - 下一个命令
    Ctrl + l - 清屏
    Ctrl + r - 启动查找，在history中查找以前的命令
    如果习惯以vi的编辑和浏览方式，可以使用
    set -o vi ：将风格变为vi。set -o vi 》 ~/.bashrc可以固定风格
    set -o emacs ：变风格为emacs
    也可以自己定义当前命令为较短的格式，使用
    alias xx='XX' ：将xx命令用XX代替
    gksu：启动对话框，可以选择权限

1. 认识 BASH 这个 Shell
================================
1.1 硬件、核心与 Shell
    能够操作应用程序的接口都能够称为壳程序。
    狭义的壳程序指的是命令列方面的软件，包括本章要介绍的 bash 等。
    广义的壳程序则包括图形接口的软件！因为图形接口其实也能够操作各种应用程序来呼叫核心工作啊！

1.2 为何要学文字接口的 shell
--------------------------------
    文字接口的 shell：大家都一样！
    远程管理：文字接口就是比较快！
    Linux 的任督二脉： shell 是也！

1.3 系统的合法 shell 与 /etc/shells 功能
--------------------------------
检查/etc/shells
    /bin/sh (已经被 /bin/bash 所取代)
    /bin/bash (就是 Linux 默认的 shell)
    /bin/ksh (Kornshell 由 AT&T Bell lab. 发展出来的，兼容于 bash)
    /bin/tcsh (整合 C Shell ，提供更多的功能)
    /bin/csh (已经被 /bin/tcsh 所取代)
    /bin/zsh (基于 ksh 发展出来的，功能更强大的 shell)
登陆取得的 shell 记录在 /etc/passwd 这个文件内

1.4 Bash shell 的功能
--------------------------------
    命令编修能力 (history)
    命令与文件补全功能： ([tab] 按键的好处)
        [Tab] 接在一串命令的第一个字的后面，则为命令补全；
        [Tab] 接在一串命令的第二个字以后时，则为『文件补齐』！
    命令别名配置功能： (alias)
    工作控制、前景背景控制： (job control, foreground, background)
    程序化脚本： (shell scripts)
    通配符： (Wildcard)

1.5 Bash shell 的内建命令： type
--------------------------------

++++++++++++++++++++++++++++++++
type [-tpa] name
++++++++++++++++++++++++++++++++
选项与参数：
    ：不加任何选项与参数时，type 会显示出 name 是外部命令还是 bash 内建命令
-t  ：当加入 -t 参数时，type 会将 name 以底下这些字眼显示出他的意义：
      file    ：表示为外部命令；
      alias   ：表示该命令为命令别名所配置的名称；
      builtin ：表示该命令为 bash 内建的命令功能；
-p  ：如果后面接的 name 为外部命令时，才会显示完整文件名；
-a  ：会由 PATH 变量定义的路径中，将所有含 name 的命令都列出来，包含 alias
++++++++++++++++++++++++++++++++

范例一：查询一下 ls 这个命令是否为 bash 内建？
[root@www ~]# type ls
ls is aliased to `ls --color=tty' <==未加任何参数，列出 ls 的最主要使用情况
[root@www ~]# type -t ls
alias                             <==仅列出 ls 运行时的依据
[root@www ~]# type -a ls
ls is aliased to `ls --color=tty' <==最先使用 aliase
ls is /bin/ls                     <==还有找到外部命令在 /bin/ls

范例二：那么 cd 呢？
[root@www ~]# type cd
cd is a shell builtin             <==看到了吗？ cd 是 shell 内建命令

2. Shell 的变量功能
================================

2.1 什么是变量？
--------------------------------
    变量就是以一组文字或符号等，来取代一些配置或者是一串保留的数据！
    变量的可变性与方便性
    影响 bash 环境操作的变量
    脚本程序设计 (shell script) 的好帮手

2.2 变量的取用与配置：echo, 变量配置守则, unset
--------------------------------
    (1)变量的取用: echo
        例题
        请在屏幕上面显示出您的环境变量 HOME 与 MAIL：
        答：
        echo $HOME 或者是 echo ${HOME}
        echo $MAIL 或者是 echo ${MAIL} 

    (2)变量的配置守则

    变量与变量内容以一个等号『=』来连结，如下所示：
    『myname=VBird』

    等号两边不能直接接空格符，如下所示为错误：
    『myname = VBird』或『myname=VBird Tsai』

    变量名称只能是英文字母与数字，但是开头字符不能是数字，如下为错误：
    『2myname=VBird』

    变量内容若有空格符可使用双引号『"』或单引号『'』将变量内容结合起来，但
        双引号内的特殊字符如 $ 等，可以保有原本的特性，如下所示：
        『var="lang is $LANG"』则『echo $var』可得『lang is en_US』
        单引号内的特殊字符则仅为一般字符 (纯文本)，如下所示：
        『var='lang is $LANG'』则『echo $var』可得『lang is $LANG』

    可用跳脱字符『 \ 』将特殊符号(如 [Enter], $, \, 空格符, '等)变成一般字符；

    在一串命令中，还需要藉由其他的命令提供的信息，可以使用反单引号『`命令`』或 『$(命令)』。特别注意，那个 ` 是键盘上方的数字键 1 左边那个按键，而不是单引号！ 例如想要取得核心版本的配置：
    『version=$(uname -r)』再『echo $version』可得『2.6.18-128.el5』

    若该变量为扩增变量内容时，则可用 "$变量名称" 或 ${变量} 累加内容，如下所示：
    『PATH="$PATH":/home/bin』

    若该变量需要在其他子程序运行，则需要以 export 来使变量变成环境变量：
    『export PATH』

    通常大写字符为系统默认变量，自行配置变量可以使用小写字符，方便判断 (纯粹依照使用者兴趣与嗜好) ；

    取消变量的方法为使用 unset ：『unset 变量名称』例如取消 myname 的配置：
    『unset myname』

2.3 环境变量的功能： env 与常见环境变量说明, set, export
--------------------------------

2.4 影响显示结果的语系变量 (locale)
--------------------------------
[root@www ~]# locale -a
....(前面省略)....
zh_TW.big5     <==大五码的中文编码
zh_TW.utf8     <==万国码的中文编码

[root@www ~]# locale  <==后面不加任何选项与参数即可！
LANG=en_US                   <==主语言的环境
LC_CTYPE="en_US"             <==字符(文字)辨识的编码
LC_NUMERIC="en_US"           <==数字系统的显示信息
LC_TIME="en_US"              <==时间系统的显示数据
LC_COLLATE="en_US"           <==字符串的比较与排序等
LC_MONETARY="en_US"          <==币值格式的显示等
LC_MESSAGES="en_US"          <==信息显示的内容，如菜单、错误信息等
LC_ALL=                      <==整体语系的环境
....(后面省略)....

[root@ivan:~]$ cat /etc/sysconfig/i18n
LANG="en_US.UTF-8"
SYSFONT="latarcyrheb-sun16"

2.5 变量的有效范围：
--------------------------------
    在学理方面，为什么环境变量的数据可以被子程序所引用呢？这是因为内存配置的关系！理论上是这样的：
    当启动一个 shell，操作系统会分配一记忆区块给 shell 使用，此内存内之变量可让子程序取用
    若在父程序利用 export 功能，可以让自定义变量的内容写到上述的记忆区块当中(环境变量)；
    当加载另一个 shell 时 (亦即启动子程序，而离开原本的父程序了)，子 shell 可以将父 shell 的环境变量所在的记忆区块导入自己的环境变量区块当中。
    透过这样的关系，我们就可以让某些变量在相关的程序之间存在，以帮助自己更方便的操作环境喔！ 

2.6 变量键盘读取、数组与宣告： read, declare, array
--------------------------------
    read

要读取来自键盘输入的变量，就是用 read 这个命令了。这个命令最常被用在 shell script 的撰写当中， 想要跟使用者对谈？用这个命令就对了。关于 script 的写法，我们会在第十三章介绍，底下先来瞧一瞧 read 的相关语法吧！

[root@www ~]# read [-pt] variable
选项与参数：
-p  ：后面可以接提示字符！
-t  ：后面可以接等待的『秒数！』这个比较有趣～不会一直等待使用者啦！

范例一：让用户由键盘输入一内容，将该内容变成名为 atest 的变量
[root@www ~]# read atest
This is a test        <==此时光标会等待你输入！请输入左侧文字看看
[root@www ~]# echo $atest
This is a test          <==你刚刚输入的数据已经变成一个变量内容！

范例二：提示使用者 30 秒内输入自己的大名，将该输入字符串作为名为 named 的变量内容
[root@www ~]# read -p "Please keyin your name: " -t 30 named
Please keyin your name: VBird Tsai   <==注意看，会有提示字符喔！
[root@www ~]# echo $named
VBird Tsai        <==输入的数据又变成一个变量的内容了！

read 之后不加任何参数，直接加上变量名称，那么底下就会主动出现一个空白行等待你的输入(如范例一)。 如果加上 -t 后面接秒数，例如上面的范例二，那么 30 秒之内没有任何动作时， 该命令就会自动略过了～如果是加上 -p ，嘿嘿！在输入的光标前就会有比较多可以用的提示字符给我们参考！ 在命令的下达里面，比较美观啦！ ^_^


2.7 与文件系统及程序的限制关系： ulimit
--------------------------------

2.8 变量内容的删除、取代与替换：, 删除与取代, 测试与替换
--------------------------------


Linux 设置命令提示符的颜色及内容
================================

当我们需要同时维护多台服务器的时候，为了避免不会在不经意间将具有破坏性的命令（删除文件、格式化文件系统）执行在其他服务器上造成不必要的损失，我们可以在为我们需要使用ssh链接的每台服务器的命令提示符设定不同的颜色，这样就能很直观的区别不同的服务区。

Linux系统的 bash shell 环境下通常是由 PS1 这个 bash内置变量决定主命令提示符的显示格式，我们只需要将这个变量设置成我们需要的格式就能获得我们想要的视觉效果。
PS1 变量中我们可以使用以下一些定义好的内容，我可以使用普通字符串和这些字符的组合输出我们需要的内容：

\d      ："Wed Sep 06" 格式的日期
\t      ：24小时制时间
\T      ：12小时制时间
\@      ：带有 am/pm 的 12 小时制时间
\e      ：ASCII转义字符
\a      ：ASCII 响铃字符（也可以键入 \007）
\r      ：回车符
\n      ：换行符
\h      ：主机名
\H      ：完整的主机名
\j      ：在此 shell 中通过按 ^Z 挂起的进程数
\l      ：此 shell 的终端设备名（如 "ttyp1"）
\s      ：shell 的名称（如 "bash"）
\v      ：bash 的版本（如 2.04）
\V      ：Bash 版本（包括补丁级别）
\u      ：用户名
\w      ：当前工作目录（绝对路径）
\W      ：当前工作目录的主文件名部分
\!      ：当前命令在历史缓冲区的位置
\$      ：如果当前用户的 UID 是 0（即root），则插入字符#；其他用户插入字符$
\\      ：反斜杠
\[      ：不可打印字符串的开头
\]      ：不可打印字符串的结束
\nnn    ：八进制转义字符

上面我讲解了内容，接着我们讲解一下如何改变输出颜色，我们通过背景色、字体颜色，属性来控制文字样式，他们都使用八进制来表示。
色值和颜色对照

前景   背景    颜色
30     40     黑色
31     41     紅色
32     42     綠色
33     43     黃色
34     44     藍色
35     45     紫紅色
36     46     青藍色
37     47     白色

属性代码

代码     行为
0        OFF
1        高亮显示
4        underline
5        闪烁
7        反白显示
8        不可见

我们一通过以下两种格式来控制输出样式：
1、设置属性和字体颜色：\[\e[属性;字体颜色m\] 或者写作 \[\033[属性;字体颜色m\]
2、设置属性和字体颜色和背景色：\[\e[属性;字体颜色;背景色m\] 或者写作 \[\033[属性;字体颜色;背景色m\]

\[\e[0m\] 表示关闭颜色输出。

举例：
单行提示符：
PS1='\[\033[1;32m[\u@\h:\w]\033[1;31m$ \033[0m\]'

[root@ivan:~]$ vim .bashrc

# .bashrc

# User specific aliases and functions

alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'

# Source global definitions
if [ -f /etc/bashrc ]; then
        . /etc/bashrc
fi

PS1='\[\033[1;32m[\u@\h:\w]\033[1;31m$ \033[0m\]'



[Solarized Dark]
text(bold)=839496
magenta(bold)=6c71c4
text=839496
white(bold)=fdf6e3
green=859900
red(bold)=cb4b16
green(bold)=586e75
black(bold)=073642
red=dc322f
blue=268bd2
black=002b36
blue(bold)=839496
yellow(bold)=657b83
cyan(bold)=93a1a1
yellow=b58900
magenta=dd3682
background=042028
white=eee8d5
cyan=2aa198
[Names]
count=1
name0=Solarized Dark
