= 5.1 用户身份与能力 =
超级用户UID0:系统的超级用户。
一个用户只有一个基本用户组，而可以有多个扩展用户组

== useradd命令用于创建新的用户，格式为：“useradd [选项]  用户名” ==

默认的用户家目录会被存放在/home目录中，默认的Shell解释器会是/bin/bash
-d   指定用户的家目录（默认为/home/username）
-e   帐号有效截至日期，格式：YYYY-MM-DD.
-u   指定该用户的默认UID
-g   指定一个初始的用户基本组（必须已存在）
-G   指定一个或多个扩展用户组
-N   不创建与用户同名的基本用户组
-s   指定该用户的默认Shell
一旦用户的解释器被设置成了nologin，那么则代表该用户不能够登录到系统

# useradd -d /home/linux -u 8888 -s /sbin/nologin linuxprobe
# id linuxprobe
uid=8888(linuxprobe) gid=8888(linuxprobe) groups=8888(linuxprobe)

== groupadd命令用于创建群组，格式为："groupadd [选项] 群组名" ==

== usermod命令用于修改用户的属性，格式为“usermod [选项] 用户名”。 ==
用户的信息被保存到了/etc/passwd文件中

-c   填写帐号的备注信息
-d-m -m与-d连用，可重新指定用户的家目录并自动把旧的数据转移过去。
-e   帐户到期时间，格式“YYYY-MM-DD”
-g   变更所属用户组
-G   变更扩展用户组
-L   锁定用户禁止其登陆系统
-U   解锁用户，允许其登陆系统
-s   变更默认终端
-u   修改用户的UID

# id linuxprobe
uid=1000(linuxprobe) gid=1000(linuxprobe) groups=1000(linuxprobe)
usermod -G root linuxprobe
# id linuxprobe
uid=1000(linuxprobe) gid=1000(linuxprobe) groups=1000(linuxprobe),0(root)

== passwd命令用于修改用户的密码，格式为：“passwd [选项] [用户名]”。 ==
-l        锁定用户禁止其登陆
-u        解除锁定，允许用户登陆。
--stdin   允许从标准输入修改用户密码，如(echo   "NewPassWord"   |   passwd   --stdin   Username)
-d        使帐号无密码
-e        强制用户下次登陆时修改密码
-S        显示用户的密码状态

== userdel命令用于删除用户，格式为：“userdel [选项] 用户名”。 ==
-f   强制删除用户，家目录与其相关文件
-r   同时删除用户，家目录与其相关文件

= 5.2 文件权限与归属 =
- : 普通文件
d : 目录文件
l : 链接文件
b : 块设备文件
c : 字符设备文件
p : 管道文件
对于文件：
  可读权限就是能够读取该文件的实际内容
  可写权限就是能够编辑、新增、修改文件的实际内容
  可执行则代表能够运行一个脚本程序的权限
对于目录文件
  可读权限就是能够读取该目录内的结构和文件列表
  可写权限就是能够更改目录内文件结构列表、新增、删除、重命名文件
  而可执行则代表进入该目录的权限。

= 5.3 文件的特殊权限 =
特殊权限位是针对于文件设置的一种特殊的功能，而且与一般权限可同时出现使用，弥补一般权限不能实现的功能
`SUID:让执行者临时拥有属主的权限（仅对拥有执行权限的二进制程序有效）`
针对二进制程序设置的特殊权限，例如所有用户都可以执行用于修改用户密码的passwd命令，而用户密码是被保存在/etc/shadow文件中的

`SGID功能一：让执行者临时拥有属组的权限（对拥有执行权限的二进制程序设置）`

`SGID功能二：在该目录中创建的文件自动继承此目录的用户组（只可以对目录设置）`
设置部门内的共享目录，让所有组内的人都能够读取里面的内容
创建部门共享目录后，将该目录设置上SGID特殊权限位，这样任何用户在里面创建的任何文件都会归属于本目录的所有组
# cd /tmp
# mkdir testdir
# ls -ald testdir/
drwxr-xr-x. 2 root root 6 Feb 11 11:50 testdir/
# chmod -Rf 777 testdir/
# chmod -Rf g+s testdir/
# ls -ald testdir/
drwxrwsrwx. 2 root root 6 Feb 11 11:50 testdir/

`chmod命令用于修改文件或目录的权限，格式为："chmod [参数] 权限 文件或目录名称"。`
# ls -al test
-rw-rw-r--. 1 linuxprobe root 15 Feb 11 11:50 test
# chmod 760 test
# ls -l test
-rwxrw----. 1 linuxprobe root 15 Feb 11 11:50 test

`chown命令用于修改文件或目录的所属主与所属组，格式为：“chown [参数] 所属主:所属组 文件或目录名称”`
chmod 和 chown 对于目录文件时需要加上大写参数-R来表示递归操作，即对目录内所有的文件进行整体操作的意思
# 
# ls -l test
-rwxrw----. 1 linuxprobe root 15 Feb 11 11:50 test
# chown root:bin test
# ls -l test
-rwxrw----. 1 root bin 15 Feb 11 11:50 test

`SBIT(Sticky Bit):只可管理自己的数据而不能删除他人文件(仅对目录有效)`
在RHEL7系统中的/tmp作为一个共享文件的目录默认已经被设置了SBIT特殊权限位，因此这里面的文件其他人是不能乱删除的
粘滞位权限只能针对目录设置，对于文件无效

 chmod o+t /test

# su - linuxprobe
Last login: Wed Feb 11 12:41:20 CST 2015 on pts/0
$ ls -ald /tmp
drwxrwxrwt. 17 root root 4096 Feb 11 13:03 /tmp
$ cd /tmp
$ ls -ald
drwxrwxrwt. 17 root root 4096 Feb 11 13:03 .
$ echo "Welcome to linuxprobe.com" > test
$ chmod 777 test
$ ls -al test 
-rwxrwxrwx. 1 linuxprobe linuxprobe 10 Feb 11 12:59 test

文件能否被删除并不取决于自身的权限大小，而是看上级目录是否有写入权限
切换到另外一个普通用户尝试删除这个别人的文件就会发现，即便权限十分的充足，但是由于SBIT特殊权限位的缘故导致无法删除其他人的文件

= 5.4 文件的隐藏属性 =
`chattr命令用于设置文件的隐藏权限，格式为：“chattr [参数] 文件”`
i   将无法对文件进行修改,若对目录设置后则仅能修改子文件而不能新建或删除。
a   仅允许补充（追加）内容.无法覆盖/删除(Append Only)。
S   文件内容变更后立即同步到硬盘(sync)。
s   彻底从硬盘中删除，不可恢复(用0填充原文件所在硬盘区域)。
A   不再修改这个文件的最后访问时间(atime)。
b   不再修改文件或目录的存取时间。
D   检查压缩文件中的错误。
d   当使用dump命令备份时忽略本文件/目录。
c   默认将文件或目录进行压缩。
u   当删除此文件后依然保留其在硬盘中的数据，方便日后恢复。
t   让文件系统支持尾部合并（tail-merging）。
X   可以直接访问压缩文件的内容。

# echo "for Test" > linuxprobe
# chattr +a linuxprobe
# rm linuxprobe
rm: remove regular file ‘linuxprobe’? y
rm: cannot remove ‘linuxprobe’: Operation not permitted

`lsattr命令用于显示文件的隐藏权限，格式为：“lsattr [参数] 文件”`
使用lsattr命令后文件上被赋予的隐藏权限就会原形毕露，按照提示的隐藏权限的类型（字母）来使用chattr命令去掉即可

# lsattr linuxprobe
-----a---------- linuxprobe
# chattr -a linuxprobe
# lsattr linuxprobe 
---------------- linuxprobe
# rm linuxprobe 
rm: remove regular file ‘linuxprobe’? y

= 5.5 文件访问控制列表 =
对某个指定的用户进行单独的权限控制
基于普通文件或目录设置ACL访问控制策略，就是设置指定的特定用户或用户组对某个文件的操作权限
对某个目录设置了访问控制策略，那么子文件继承其访问策略，而若对文件设置了访问控制策略则不再继承上级目录的控制策略
`setfacl命令用于增加或者修改ACL规则，格式为："setfacl [参数] 文件名称"`

setfacl命令针对单一用户或用户组、单一文件或目录来进行读写执行权限的控制
对于目录文件需要使用递归-R参数，对普通文件需要使用-m参数
删除某个文件的访问控制策划使用-b参数

# setfacl -Rm u:linuxprobe:rwx /root
# su - linuxprobe
Last login: Sat Mar 21 15:45:03 CST 2015 on pts/1
$ cd /root
$ ls
anaconda-ks.cfg Downloads Pictures Public
$ cat anaconda-ks.cfg

常用的ls命令看不到访问控制列表信息，可以看到文件的权限最后一个点(.)变成了加号（+）
意味着这个文件已经设置了ACL访问策略

`getfacl命令用于显示文件的ACL规则，格式为："getfacl 文件名称"`
getfacl命令能够显示出在文件设置的所有访问策略规则信息，每个文件都有一个默认的ACL策略

# getfacl /root
getfacl: Removing leading '/' from absolute path names
# file: root
# owner: root
# group: root
user::r-x
user:linuxprobe:rwx
group::r-x
mask::rwx
other::---

= 5.6 su命令与sudo服务 =
# su - root
su命令与用户名之间有一个减号(-)，这意味着完全的切换到新的用户
即把环境变量信息也变更为新的用户，而不保留原始的用户信息

使用sudo程序来将特定命令的执行权限赋予给指定的用户，保证了正常工作的同时也避免了泄露root超级用户密码
    1:限制用户执行指定的命令
    2:记录用户执行的每一条命令
    3:配置文件（/etc/sudoers）提供集中的管理用户、权限与主机等参数
    4:验证过密码后5分钟(默认值)内无须再让用户验证密码，更加的方便

`sudo服务用于给普通用户提供额外权利来完成原本超级用户才能完成的任务，格式为：“sudo [参数] 命令名称”`
-h   列出帮助信息。
-l   列出当前用户可执行的命令。
-u   用户名或UID值,以指定的用户身份执行命令。
-k   清空安全时间，下次执行sudo时需要再次密码验证。
-b   在后台执行指定的命令。
-p   更改询问密码的提示语。

只用超级用户才可以使用visudo命令编辑sudo程序的配置文件（/etc/sudoers）
平时还可以使用visudo命令来配置用户权限，防止多个用户同时修改配置文件
`谁可以使用超级用户身份     允许使用sudo命令的主机=（以谁的身份执行命令）     可执行命令的列表`

# visudo
 97 ## Allow root to run any commands anywhere
 98 root ALL=(ALL) ALL
 99 linuxprobe ALL=(ALL) ALL
 
如果需要让某个用户只能使用超级用户的身份执行特定的命令，一定要写上该命令的绝对路径
whereis命令找出命令所对应的保存路径

99 linuxprobe ALL=(ALL) /bin/cat

添加NOPASSWD参数来使得用户执行sudo命令时不再需要密码验证
# whereis poweroff
poweroff: /usr/sbin/poweroff /usr/share/man/man8/poweroff.8.gz
# visudo
 ivan ALL=(ALL) NOPASSWD:ALL
